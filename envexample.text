

---
SETTING UP POSTGRES AND CONNECTING TO THE DATABASE

You can connect to the database using a node-postgres Pool object or Client object. The Client will using the environment variables supplied to it
(via a config object)for making a one-time static connection. But the Pool object dynamically(lazily) creates a "pool" of client instances on demand
as they are needed an the config object properties (and their values) are passed to each client. It is optimal in most instances to use a Pool object
 when making multiple recurrent requests and the latency is negligible for making relevant queries.

Setting up Postgres in your operating system:

The first process involves setting up Postgres on your system which will vary depending on the operating system.

For Mac: Go to  https://postgresapp.com/ and follow the instructions on that website for installling Postgres.app

Then type psql into your terminal and you should see the psql version and =# in front of your username.
In case of any errors or the above not showing using the following commands: 1) brew update, 2)brew doctor and 3) brew install postgresql

If you see an error such as 'psql: error: connection to server on socket "/tmp/.s.PGSQL.5432" failed: FATAL: database "username" does not exist', 
then run the command 'createdb' (without quotes and this should create the database)

For Windows/Linux/Ubuntu:

Run these commands in the terminal:

sudo apt-get update
sudo apt-get install postgresql postgresql-contrib
sudo -u postgres createuser --superuser $USER
sudo -u postgres createdb $USER


These above command updates your file system,installs postgres and creates a postgres user.
If you get an error such as 'role "username-here" already exists' then you already have a postgres superuser
You should be able to type psql and then you will be able to access psql which has the default database and any databases you create. Yout may have to run
the command 'sudo service postgresql start' in order for psql command to work and for postgresuser=# to be displayed.

CREATING A POSTGRES PASSWORD:

Now you can use the terminal command -> ALTER USER username WITH PASSWORD 'mypassword'
(replace username with your postgres username and  'mypassword' with your chosen 'difficult to guess' password)
You should see the ALTER keyword appear in the terminal, then  use \q to exit out of it


SETTING STORAGE OF POSTGRES PASSWORD AND CONNECTION DETAILS:

This step will dictate whether you wish to pass you password as part of the config object that the constructor of Pool/Client can accepty or if 
you wish to access the database without having to store you password within the project files as an environment variable.

If you do not want to have to enter your password when making requests to the database you can use a .pgpass file in your root(home) directory
Create one using the 'touch' command and enter the following using this syntax:

hostname:port:database:username:password


You can use the '*' symbol as a wildcard type for the defaults but in the :password portion you should put your password in
You can also specify the port, specific database and hostname if you using this project on a company/organizational computer.

If you use the above approach you can will not need to enter your password when doing commands involving psql.
Use the chmod command on the .pgpass file to give pertinent permissions for access.



If you prefer to have authentication as a strict requirement you can pass the connection details (properties) of the postgres database using the a config object 
with the process.env variable (development,production or testing)

In node-postgres the connection details should be passed like something similar to this:

  
const pool = new Pool({
  user: process.env.PGUSER
  host: process.env.PGHOST,
  database: process.env.PGDATABASE,
  password: process.env.PGPASSWORD,
  port: process.env.PGPORT,
  max: 6,
  idleTimeoutMillis: 35000,
  connectionTimeoutMillis: 2100  
})

As you can see from above the  important process.env object properties are not passed in by value (for security reasons) and the values of those properties
are kept within the relevant .env.production/test/development file (which should be git ignored) like this below:

PGUSER=<PGUSER>
PGHOST=<PGHOST>
PGPASSWORD=<PGPASSWORD>
PGDATABASE=<PGDATABASE>
PGPORT=<PGPORT>


----